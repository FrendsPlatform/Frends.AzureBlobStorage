using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;

namespace Frends.AzureBlobStorage.DeleteBlob;

/// <summary>
/// Azure Blob Storage task.
/// </summary>
public class AzureBlobStorage
{
    /// <summary>
    /// Deletes a single blob from Azure blob storage.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureBlobStorage.DeleteBlob)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="options">Options parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success }</returns>
    public static async Task<Result> DeleteBlob([PropertyTab] Input input, [PropertyTab] Options options,CancellationToken cancellationToken)
    {
        var blob = new BlobClient(input.ConnectionString, input.ContainerName, input.BlobName);

        if (!await blob.ExistsAsync(cancellationToken)) return new Result (true);

        try
        {
            var accessCondition = string.IsNullOrWhiteSpace(options.VerifyETagWhenDeleting)
                ? new BlobRequestConditions { IfMatch = new Azure.ETag(options.VerifyETagWhenDeleting) }
                : null;

            var result = await blob.DeleteIfExistsAsync(
                options.SnapshotDeleteOption.ConvertEnum<DeleteSnapshotsOption>(), accessCondition,
                cancellationToken);

            return new Result(result);
        }
        catch (Exception e)
        {
            throw new Exception("DeleteBlobAsync: Error occured while trying to delete blob", e);
        }
    }
}