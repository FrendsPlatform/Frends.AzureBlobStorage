using System;
using System.ComponentModel;
using System.Threading;
using System.Text;
using Azure.Storage.Blobs;
using Azure;
using Frends.AzureBlobStorage.ReadBlob.Definitions;
using System.Threading.Tasks;
using Azure.Identity;

namespace Frends.AzureBlobStorage.ReadBlob;

/// <summary>
/// Azure Storage task.
/// </summary>
public class AzureBlobStorage
{
    /// <summary>
    /// Frends Task for encoding and reading a single blob from Azure Storage.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureBlobStorage.ReadBlob)
    /// </summary>
    /// <param name="source">Source parameters.</param>
    /// <param name="options">Options parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { string Content }</returns>

    public static async Task<Result> ReadBlob([PropertyTab] Source source, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        var blob = CreateBlobClient(source);
        var result = await blob.DownloadContentAsync(cancellationToken);
        return new Result(SetStringEncoding(result.Value.Content.ToString(), options.Encoding));
    }

    private static BlobClient CreateBlobClient(Source source)
    {
        switch (source.AuthenticationMethod)
        {
            case AuthenticationMethod.ConnectionString:
                if (string.IsNullOrWhiteSpace(source.ConnectionString))
                    throw new Exception("Connection string required.");
                return new BlobClient(source.ConnectionString, source.ContainerName, source.BlobName);

            case AuthenticationMethod.SASToken:
                if (string.IsNullOrWhiteSpace(source.SASToken) || string.IsNullOrWhiteSpace(source.URI))
                    throw new Exception("SAS Token and URI required.");
                var uri = $"{source.URI}/{source.ContainerName}/{source.BlobName}?";
                return new BlobClient(new Uri(uri), new AzureSasCredential(source.SASToken));

            case AuthenticationMethod.OAuth2:
                if (source.ApplicationID is null || source.ClientSecret is null || source.TenantID is null || source.StorageAccountName is null)
                    throw new Exception("ApplicationID, ClientSecret, TenantID and StorageAccountName required.");
                var credentials = new ClientSecretCredential(source.TenantID, source.ApplicationID, source.ClientSecret, new ClientSecretCredentialOptions());
                var url = new Uri($"https://{source.StorageAccountName}.blob.core.windows.net/{source.ContainerName}/{source.BlobName}");
                return new BlobClient(url, credentials);

            default: throw new Exception("Authentication method not supported.");
        }
    }

    private static string SetStringEncoding(string text, Encode encoding)
    {
        var bytes = Encoding.UTF8.GetBytes(text);
        return encoding switch
        {
            Encode.UTF8 => Encoding.UTF8.GetString(bytes),
            Encode.UTF32 => Encoding.UTF32.GetString(bytes),
            Encode.Unicode => Encoding.Unicode.GetString(bytes),
            Encode.ASCII => Encoding.ASCII.GetString(bytes),
            _ => Encoding.UTF8.GetString(bytes),
        };
    }
}