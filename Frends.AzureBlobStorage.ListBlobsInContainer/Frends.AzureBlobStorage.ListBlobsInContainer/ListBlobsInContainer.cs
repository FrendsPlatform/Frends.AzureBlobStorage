using System;
using System.ComponentModel;
using Azure.Storage.Blobs;
using Azure;
using Frends.AzureBlobStorage.ListBlobsInContainer.Definitions;
using System.Threading.Tasks;
using Azure.Storage.Blobs.Models;
using System.Collections.Generic;
using System.Threading;
using Azure.Identity;

namespace Frends.AzureBlobStorage.ListBlobsInContainer;

/// <summary>
/// Azure Blob Storage Task.
/// </summary>
public class AzureBlobStorage
{
    /// <summary>
    /// List blobs and directories from Azure Blob Storage container.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureBlobStorage.ListBlobsInContainer)
    /// </summary>
    /// <param name="source">Source connection parameters.</param>
    /// <param name="options">Options for the task</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task</param>
    /// <returns>List { string Type, string Name, string URL, string ETag, DateTimeOffset? CreatedOn, DateTimeOffset? LastModified  }</returns>
    public static async Task<Result> ListBlobsInContainer([PropertyTab] Source source, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        return new Result(await ListBlobHandler(source, options, cancellationToken));
    }

    private static async Task<List<BlobData>> ListBlobHandler(Source source, Options options, CancellationToken cancellationToken)
    {
        var blobContainerClient = GetBlobContainerClient(source);
        var blobListing = new List<BlobData>();

        try
        {
            if (options.ListingStructure is ListingStructure.Flat)
            {
                var flatEnumerator = blobContainerClient.GetBlobsAsync(BlobTraits.None, BlobStates.None, string.IsNullOrWhiteSpace(options.Prefix) ? null : options.Prefix, cancellationToken).AsPages().GetAsyncEnumerator(cancellationToken);

                while (await flatEnumerator.MoveNextAsync())
                {
                    var blobItems = flatEnumerator.Current;

                    foreach (var blobItem in blobItems.Values)
                    {
                        cancellationToken.ThrowIfCancellationRequested();

                        blobListing.Add(new BlobData
                        {
                            Type = blobItem.Properties.BlobType.ToString(),
                            URL = @$"{blobContainerClient.Uri}/{blobItem.Name}",
                            Name = blobItem.Name,
                            ETag = blobItem.Properties.ETag.ToString(),
                            CreatedOn = blobItem.Properties.CreatedOn,
                            LastModified = blobItem.Properties.LastModified
                        });
                    }
                }

                await flatEnumerator.DisposeAsync();
            }
            else
            {
                var hierarchyItemEnumerator = blobContainerClient.GetBlobsByHierarchyAsync(BlobTraits.None, BlobStates.None, "/", string.IsNullOrWhiteSpace(options.Prefix) ? null : options.Prefix, cancellationToken).AsPages().GetAsyncEnumerator(cancellationToken);

                while (await hierarchyItemEnumerator.MoveNextAsync())
                {
                    var blobItems = hierarchyItemEnumerator.Current;
                    foreach (var blobItem in blobItems.Values)
                    {
                        cancellationToken.ThrowIfCancellationRequested();

                        if (blobItem.IsBlob)
                        {
                            blobListing.Add(new BlobData
                            {
                                Type = blobItem.Blob.Properties.BlobType.ToString(),
                                URL = @$"{blobContainerClient.Uri}/{blobItem.Blob.Name}",
                                Name = blobItem.Blob.Name,
                                ETag = blobItem.Blob.Properties.ETag.ToString(),
                                CreatedOn = blobItem.Blob.Properties.CreatedOn,
                                LastModified = blobItem.Blob.Properties.LastModified
                            });
                        }
                        else
                        {
                            blobListing.Add(new BlobData
                            {
                                Type = "Directory",
                                URL = $"{blobContainerClient.Uri}/{blobItem.Prefix}",
                                Name = blobItem.Prefix,
                                ETag = null,
                                CreatedOn = null,
                                LastModified = null
                            });
                        }
                    }
                }
                await hierarchyItemEnumerator.DisposeAsync();
            }
            return blobListing;
        }
        catch (Exception ex)
        {
            throw new ArgumentException("ListBlobHandler error: ", ex);
        }
    }

    private static BlobContainerClient GetBlobContainerClient(Source source)
    {
        try
        {
            switch (source.AuthenticationMethod)
            {
                case AuthenticationMethod.ConnectionString:
                    if (string.IsNullOrWhiteSpace(source.ConnectionString))
                        throw new Exception("Connection string required.");
                    return new BlobContainerClient(source.ConnectionString, source.ContainerName);
                case AuthenticationMethod.SASToken:
                    if (string.IsNullOrWhiteSpace(source.SASToken) || string.IsNullOrWhiteSpace(source.URI))
                        throw new Exception("SAS Token and URI required.");
                    return new BlobContainerClient(new Uri($"{source.URI}/{source.ContainerName}?"), new AzureSasCredential(source.SASToken));
                case AuthenticationMethod.OAuth2:
                    var credentials = new ClientSecretCredential(source.TenantID, source.ApplicationID, source.ClientSecret, new ClientSecretCredentialOptions());
                    var blobServiceClient = new BlobServiceClient(new Uri($"{source.URI}"), credentials);
                    return blobServiceClient.GetBlobContainerClient(source.ContainerName);
                default: throw new NotSupportedException();
            }
        }
        catch (Exception ex)
        {
            throw new ArgumentException("GetBlobContainerClient error: ", ex);
        }
    }
}