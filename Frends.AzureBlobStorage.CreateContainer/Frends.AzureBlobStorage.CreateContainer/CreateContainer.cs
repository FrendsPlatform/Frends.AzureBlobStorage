using System;
using System.Threading;
using System.Threading.Tasks;
using System.ComponentModel;
using Frends.AzureBlobStorage.CreateContainer.Definitions;
using Azure.Identity;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;

namespace Frends.AzureBlobStorage.CreateContainer;

/// <summary>
/// Azure Blob Storage Task.
/// </summary>
public static class AzureBlobStorage
{
    /// <summary>
    /// Create a container to Azure Blob Storage.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureBlobStorage.CreateContainer)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string Error, string Uri }</returns>
    public static async Task<Result> CreateContainer([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        try
        {
            BlobContainerClient container = GetBlobContainer(input);
            await container.CreateIfNotExistsAsync(PublicAccessType.None, null, null, cancellationToken);
            return new Result(true, container.Uri.ToString());
        }
        catch (Exception ex)
        {
            throw new Exception("Creating a new container caused an exception.", ex);
        }
    }

    private static BlobContainerClient GetBlobContainer(Input input)
    {
        try
        {
            ClientSecretCredential credentials = null;
            BlobServiceClient blobServiceClient = null;

            switch (input.ConnectionMethod)
            {
                case ConnectionMethod.ConnectionString:
                    blobServiceClient = new BlobServiceClient(input.ConnectionString);
                    return blobServiceClient.GetBlobContainerClient(input.ContainerName);
                case ConnectionMethod.OAuth2:
                    foreach (var _conn in input.Connection)
                    {
                        credentials = new ClientSecretCredential(_conn.TenantID, _conn.ApplicationID, _conn.ClientSecret, new ClientSecretCredentialOptions());

                        blobServiceClient = new BlobServiceClient(new Uri($"https://{_conn.StorageAccountName}.blob.core.windows.net"), credentials);
                    }
                    return blobServiceClient.GetBlobContainerClient(input.ContainerName);
                    default: throw new NotSupportedException();
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"GetBlobContainer error: {ex}");
        }
    }
}